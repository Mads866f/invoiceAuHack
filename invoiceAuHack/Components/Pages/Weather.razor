@page "/weather"
@using System.Text
@attribute [StreamRendering]


<PageTitle>Invoices</PageTitle>

<h1>Invoices</h1>


@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Invoice No.</th>
            <th>Amount</th>
            <th>Sender</th>
            <th>Receiver</th>
            <th>Due Date</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.Invoice</td>
                <td>@forecast.Amount</td>
                <td>@forecast.Sender</td>
                <td>@forecast.Receiver</td>
                <td>@forecast.DueDate</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var invoiceNumbers = InvoiceNumberGenerator.GenerateRandomInvoiceNumber();
        var amounts = new[] { 100, 200, 300, 400, 500 };
        var senders = new[] { "BullerMand A/S", "HånderFraPh Inc.", "MågensHund Holding", "Tucanen", "HellsAngels International" };
        var receivers = new[] { "Mikkel Holding", "Mikkel Holding","Mikkel Holding","Mikkel Holding","Mikkel Holding" };
        var dueDates = new[] { DateOnly.FromDateTime(DateTime.Now.AddDays(1)), DateOnly.FromDateTime(DateTime.Now.AddDays(2)), DateOnly.FromDateTime(DateTime.Now.AddDays(3)), DateOnly.FromDateTime(DateTime.Now.AddDays(4)), DateOnly.FromDateTime(DateTime.Now.AddDays(5)) };
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 100).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            Invoice = InvoiceNumberGenerator.GenerateRandomInvoiceNumber(),
            Amount = amounts[Random.Shared.Next(amounts.Length)],
            Sender = senders[Random.Shared.Next(senders.Length)],
            Receiver = receivers[Random.Shared.Next(receivers.Length)],
            DueDate = dueDates[Random.Shared.Next(dueDates.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public string? Invoice { get; set; }
        public int Amount { get; set; }
        public string? Sender { get; set; }
        public string? Receiver { get; set; }
        public DateOnly DueDate { get; set; }
        public string? Summary { get; set; }
    }
    public class InvoiceNumberGenerator
    {
        private static Random random = new Random();

        public static string GenerateRandomInvoiceNumber()
        {
            // Random length for an invoice number (6 to 12 characters)
            int length = random.Next(6, 13);
        
            // Randomly choose format patterns to make it "invalid"
            // Common formats with added randomness
            string[] patterns = { "XX####", "#X##X#", "##X#XX", "XX#X##", "#####", "X#X#X#", "#XX###" };
        
            // Pick a random pattern
            string pattern = patterns[random.Next(patterns.Length)];
        
            // Generate the invoice number based on the pattern
            StringBuilder invoiceNumber = new StringBuilder();
        
            foreach (char c in pattern)
            {
                if (c == 'X')
                {
                    // Add a random uppercase letter
                    invoiceNumber.Append((char)random.Next('A', 'Z' + 1));
                }
                else if (c == '#')
                {
                    // Add a random digit
                    invoiceNumber.Append(random.Next(0, 10));
                }
            }

            return invoiceNumber.ToString();
        }
    }

}